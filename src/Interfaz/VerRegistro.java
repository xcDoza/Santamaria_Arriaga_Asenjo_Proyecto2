/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interfaz;

import Clases.ListaArray;
import Clases.NodoTree;
import Clases.Persona;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JTextArea;
import proyecto2.HashTable;

/**
 *
 * @author xc2do
 */
public class VerRegistro extends javax.swing.JFrame {

    private HashTable personaHashTable; //declara la variable personaHashTable

    /**
     * Creates new form VerRegistro
     */
    public VerRegistro() {
        initComponents();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); // Para que no se cierre el programa cuando se clickea "x"
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Nodos = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        Informacion = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Nodos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        Nodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NodosActionPerformed(evt);
            }
        });

        Informacion.setColumns(20);
        Informacion.setRows(5);
        jScrollPane1.setViewportView(Informacion);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addComponent(Nodos, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Nodos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(149, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //metodo para establecer personaHashtable desde otra clase
    public void setPersonaHashTable(HashTable personaHashTable) {
        this.personaHashTable = personaHashTable;
    }

    //metodo para poblar el ComboBox con los nombres de las personas
    public void poblarComboBox() {
        Nodos.removeAllItems(); //limpia el ComboBox
        System.out.println("Llenando el ComboBox..."); // Mensaje de depuración
        for (NodoTree nodo : personaHashTable.getTable()) {
            if (nodo != null) {
                Persona persona = (Persona) nodo.getElement();
                if (persona != null) {
                    Nodos.addItem(persona.getNombre()); // Añade solo el nombre 
                    System.out.println("Aniadido al ComboBox: " + persona.getNombre()); // Mensaje de depuración }
                } else {
                    System.out.println("Persona es nula en nodo: " + nodo.getKey());
                }
            } else {
                System.out.println("Nodo es nulo en la HashTable");
            }
        }
    }


    private void NodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NodosActionPerformed
        String selectedName = (String) Nodos.getSelectedItem();
        if (selectedName != null) {
            for (NodoTree nodo : personaHashTable.getTable()) {
                if (nodo != null) {
                    Persona persona = (Persona) nodo.getElement();
                    if (persona.getNombre().equals(selectedName)) {
                        String key = persona.getNombre() + persona.getNumeric();
                        NodoTree encontrado = personaHashTable.get(key, false); // Usa la clave completa 
                        if (encontrado != null) {
                            Persona personaEncontrada = (Persona) encontrado.getElement();
                            StringBuilder info = new StringBuilder();
                            info.append("Nombre: ").append(personaEncontrada.getNombre()).append("\n");
                            info.append("Apodo: ").append(personaEncontrada.getApodo()).append("\n");
                            ListaArray atributos = personaEncontrada.getAtributos();
                            for (int i = 0; i < atributos.getMaxSize(); i++) {
                                info.append(atributos.toStringAt(i)).append("\n");
                            }
                            Informacion.setText(info.toString());
                        } else {
                            Informacion.setText("Informacion no disponible.");
                        }
                        break;
                    }
                }
            }
        }
    }//GEN-LAST:event_NodosActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VerRegistro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VerRegistro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VerRegistro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VerRegistro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VerRegistro().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Informacion;
    private javax.swing.JComboBox<String> Nodos;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
